{% import "macros.twig" as macros %}
package {{ package }};

import com.flarestar.drones.base.DroneInterface;
import com.flarestar.drones.base.Screen;
import com.flarestar.drones.views.BoxModelNode;
import com.flarestar.drones.views.Scope;
import com.flarestar.drones.views.ViewFactory;
import com.flarestar.drones.views.ScopedViewFactory;
import android.view.View;
import android.view.ViewGroup;
import android.os.Handler;
import {{ applicationPackage }}.R;

public class {{ className }} implements DroneInterface {

    {% for scope in scopeDefinitions %}
    public static class {{ scope.getScopeClassName() }} extends Scope {
        {% for property in scope.properties %}
        public {{ property.type }} {{ property.name }};
        {% endfor %}

        {% if scope.getParentScope() == null %}
        public {{ scope.getScopeClassName() }}(Handler handler) {
            super(handler);
        }
        {% else %}
        public {{ scope.getScopeClassName() }}(Handler handler, {{ scope.getParentScope().getScopeClassName() }} parent) {
            super(handler, parent);

            {% for property in scope.properties %}
            {% if property.isInherited %}
            this.{{ property.name }} = parent.{{ property.name }};
            {% elseif property.initialValueExpression != null %}
            this.{{ property.name }} = {{ property.initialValueExpression }};
            {% endif %}
            {% endfor %}
        }
        {% endif %}
    }
    {% endfor %}

    private Handler _handler;

    public {{ className }}() {
        _handler = new Handler();
    }

    public void setUpDrone(final Screen screen) {
        if (!(screen instanceof {{ screenClassName }})) {
            return;
        }

        screen.setContentView(makeView_{{ rootView.id }}(screen));
    }

    {{ macros.make_view_function(rootView, interpolator, styleProcessor) }}
}
