{% import "macros.twig" as macros %}
package {{ package }};

import com.flarestar.drones.base.Drone;
import com.flarestar.drones.base.BaseScreen;
import com.flarestar.drones.views.viewgroups.BoxModelNode;
import com.flarestar.drones.views.scope.Scope;
import com.flarestar.drones.views.ViewFactory;
import com.flarestar.drones.views.ScopedViewFactory;
import com.flarestar.drones.views.viewgroups.ScopedViewGroup;
import com.flarestar.drones.views.viewgroups.DynamicViewGroup;
import com.flarestar.drones.views.ViewRecycler;
import com.flarestar.drones.views.scope.Listener;
import com.flarestar.drones.views.LayoutBuilder;
import android.view.View;
import android.view.ViewGroup;
import android.os.Handler;
import javax.inject.Inject;
import javax.inject.Singleton;
import {{ applicationPackage }}.R;

@Singleton
public class {{ className }} implements Drone, LayoutBuilder {

    @Inject
    ViewRecycler _viewRecycler;

    {% for property in injectedProperties %}
    @Inject
    {{ property.type }} {{ property.name }};
    {% endfor %}

    {% for scope in scopeDefinitions %}
    public class {{ scope.getScopeClassName() }} extends Scope<{% if scope.getParentScope() != null %}{{ scope.getParentScope().getScopeClassName() }}{% else %}Scope{% endif %}> {
        {% for property in scope.ownProperties() %}
        public {{ property.type }} {{ property.name }};
        {% endfor %}

        {% if scope.getParentScope() == null %}
        public {{ scope.getScopeClassName() }}(Handler handler, View owner) {
            super(handler, owner);
        {% else %}
        public {{ scope.getScopeClassName() }}(Handler handler, View owner, {{ scope.getParentScope().getScopeClassName() }} parent) {
            super(handler, owner, parent);
        {% endif %}

            {% for property in scope.ownProperties() %}
            {% if property.initialValueExpression != null %}
            this.{{ property.name }} = {{ property.initialValueExpression }};
            {% endif %}
            {% endfor %}
        }
    }
    {% endfor %}

    private Handler _handler;

    @Inject
    public {{ className }}() {
        _handler = new Handler();
    }

    public ViewRecycler getViewRecycler() {
        return _viewRecycler;
    }

    public void setUpDrone(final BaseScreen screen) {
        if (!(screen instanceof {{ screenClassName }})) {
            return;
        }

        final DynamicViewGroup rootView = (DynamicViewGroup)makeView_{{ rootView.id }}(screen);

        rootView.getScope().postDigest(new Scope.PostDigestRunnable() {
            @Override
            public void run() {
                recreateIfDirty(rootView);
            }

            private void recreateIfDirty(DynamicViewGroup view) {
                if (view.isDirty()) {
                    view.createChildren();
                } else {
                    for (int i = 0; i != view.getChildCount(); ++i) {
                        final View child = view.getChildAt(i);
                        if (child instanceof DynamicViewGroup) {
                            recreateIfDirty((DynamicViewGroup)child);
                        }
                    }
                }
            }

            @Override
            public boolean isFixed() {
                return true;
            }
        });

        rootView.getScope().apply();
        screen.setContentView(rootView);
    }

    {{ macros.make_view_function(rootView, interpolator, styleProcessor, typeInferer) }}
}
