package {{ component.getGeneratedPackage() }};

import dagger.Component;
import javax.inject.Inject;
import javax.inject.Singleton;
import com.flarestar.drones.base.Drone;
import com.flarestar.drones.base.DroneCollection;
import android.app.Activity;

@Singleton
@Component(modules = { {{ component.getModule().getGeneratedClassName() }}.class })
abstract class {{ component.getGeneratedClassName() }} implements DroneCollection {

    {% for drone in component.getDrones() %}
    public abstract {{ drone.getClassName() }} make{{ drone.getSimpleClassName() }}();
    {% endfor %}

    public Drone[] getDrones() {
        return new Drone[] {
            {% for drone in component.getDrones() %}
            make{{ drone.getSimpleClassName() }}(),
            {% endfor %}
        };
    }

    public static DroneCollection build(Activity activity) {
        return Dagger{{ component.getGeneratedClassName() }}.builder().{{ component.getModule().getGeneratedClassNameLc() }}(new {{ component.getModule().getGeneratedClassName() }}(activity)).build();
    }
}
