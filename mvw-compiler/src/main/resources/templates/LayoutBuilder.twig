{# TODO: use underscores for all internal variables #}
package {{ builder.getContext().getActivityPackage() }};

import com.flarestar.drones.base.Drone;
import com.flarestar.drones.base.BaseScreen;
import com.flarestar.drones.views.viewgroups.BoxModelNode;
import com.flarestar.drones.views.scope.Scope;
import com.flarestar.drones.views.ViewFactory;
import com.flarestar.drones.views.ScopedViewFactory;
import com.flarestar.drones.views.viewgroups.BaseDroneViewGroup;
import com.flarestar.drones.views.viewgroups.dynamic.SingleViewFactory;
import com.flarestar.drones.views.viewgroups.dynamic.RangeViewFactory;
import com.flarestar.drones.views.scope.Listener;
import com.flarestar.drones.views.scope.watcher.Watcher;
import com.flarestar.drones.views.LayoutBuilder;
import com.flarestar.drones.views.aspect.ScrollingAspect;
import com.flarestar.drones.routing.ActivityRouter;
import com.flarestar.drones.base.annotations.di.ActivityScope;
import android.view.View;
import android.view.ViewGroup;
import android.os.Handler;
import javax.inject.Inject;
import javax.inject.Singleton;
import dagger.Component;
import java.util.concurrent.Callable;
import {{ builder.getContext().getApplicationPackage() }}.R;
import dagger.Subcomponent;

@ActivityScope
public class {{ builder.getContext().getLayoutBuilderSimpleClassName() }} implements Drone, LayoutBuilder {

    private ViewFactory[] _toTransclude;

    {% for directiveTree in builder.getIsolateDirectiveTrees() %}
    {% render directiveTree.getScopeInterface() %}{% endrender %}
    {% endfor %}

    {% for definition in builder.getScopeDefinitions() %}
    {% render definition %}{% endrender %}
    {% endfor %}

    {% render builder.getScopeComponent() %}{% endrender %}

    private Handler _handler;
    private ScopesComponent _scopesInjector;

    @Inject
    public {{ builder.getContext().getLayoutBuilderSimpleClassName() }}({{ builder.getContext().getActivityClassSimpleName() }}ActivityComponent parentComponent) {
        _handler = new Handler();
        _scopesInjector = parentComponent.makeScopesComponent();
    }

    public void setUpDrone(final BaseScreen screen) {
        if (!(screen instanceof {{ builder.getContext().getActivityClassName }})) {
            return;
        }

        final BaseDroneViewGroup rootView = (BaseDroneViewGroup)makeView_{{ builder.getRootViewId() }}(screen);
        rootView.getScope().apply();
        screen.setContentView(rootView);

        _toTransclude = null;
    }

    {% render builder.getRootMakeViewMethod() %}{% endrender %}

    {% for directiveTree in builder.getIsolateDirectiveTrees() %}
    {% render directiveTree.getDirectiveMakeView() %}{% endrender %}
    {% endfor %}

    {% for function in builder.getUserFunctions() %}
    {% render function %}{% endrender %}
    {% endfor %}
}
