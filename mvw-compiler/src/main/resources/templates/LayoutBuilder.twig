{% import "macros.twig" as macros %}
package {{ package }};

import com.flarestar.drones.base.Drone;
import com.flarestar.drones.base.BaseScreen;
import com.flarestar.drones.views.viewgroups.BoxModelNode;
import com.flarestar.drones.views.scope.Scope;
import com.flarestar.drones.views.ViewFactory;
import com.flarestar.drones.views.ScopedViewFactory;
import com.flarestar.drones.views.viewgroups.BaseDroneViewGroup;
import com.flarestar.drones.views.viewgroups.DynamicViewGroup;
import com.flarestar.drones.views.viewgroups.dynamic.SingleViewFactory;
import com.flarestar.drones.views.viewgroups.dynamic.RangeViewFactory;
import com.flarestar.drones.views.scope.Listener;
import com.flarestar.drones.views.LayoutBuilder;
import com.flarestar.drones.views.aspect.ScrollingAspect;
import android.view.View;
import android.view.ViewGroup;
import android.os.Handler;
import javax.inject.Inject;
import javax.inject.Singleton;
import java.util.concurrent.Callable;
import {{ applicationPackage }}.R;

@Singleton
public class {{ className }} implements Drone, LayoutBuilder {

    {% for property in injectedProperties %}
    @Inject
    {{ property.type }} {{ property.name }};
    {% endfor %}

    {% for scope in scopeDefinitions %}
    public class {{ scope.getScopeClassName() }} extends Scope<{% if scope.getParentScope() != null %}{{ scope.getParentScope().getScopeClassName() }}{% else %}Scope{% endif %}> {
        {% for property in scope.ownProperties() %}
        public {{ property.type }} {{ property.name }};
        {% endfor %}

        {% if scope.getParentScope() == null %}
        public {{ scope.getScopeClassName() }}(Handler handler, View owner) {
            super(handler, owner);
        {% else %}
        public {{ scope.getScopeClassName() }}(Handler handler, View owner, {{ scope.getParentScope().getScopeClassName() }} parent) {
            super(handler, owner, parent);
        {% endif %}

            final {{ scope.getScopeClassName() }} _self = this;

            {% for property in view.parent.scopeDefinition.inheritedProperties() %}
            final {{ property.type }} {{ property.name }} = {{ property.accessCode() }};
            {% endfor %}

            {% for property in scope.ownProperties() %}
            {% if not property.hasBinding() %}
            {% set initialValue = scopePropertyValueDeducer.getInitialValueExpression(property, null) %}

            {% if initialValue != null %}
            this.{{ property.name }} = {% if property.hasBidirectionalBinding() %}parent.{% endif %}{{ initialValue }};
            {% endif %}
            {% if property.hasBidirectionalBinding() %}
            watch(new Watcher() { // bidirectional binding watch
                @Override
                public Object getWatchValue(Scope<?> _scope) {
                    final {{ property.type }} _parentValue = parent.{{ initialValue }};

                    // if parent value != new value, set parent value
                    // what if parent value changes, how do we sync new value?
                    if (_self.{{ property.name }} == _parentValue) {
                        return _parentValue;
                    }

                    if (parentValue != lastValue) { // parent value has changed, sync w/ this value
                        _self.{{ property.name }} = _parentValue;
                    } else { // current scope value changed, sync w/ parent
                        parent.{{ initialValue }} = _self.{{ property.name }};
                    }

                    return parentValue;
                }
            });
            {% endif %}

            {% endif %}
            {% endfor %}
        }
    }
    {% endfor %}

    private Handler _handler;

    @Inject
    public {{ className }}() {
        _handler = new Handler();
    }

    public void setUpDrone(final BaseScreen screen) {
        if (!(screen instanceof {{ screenClassName }})) {
            return;
        }

        final DynamicViewGroup rootView = (DynamicViewGroup)makeView_{{ rootView.id }}(screen);
        rootView.getScope().apply();
        screen.setContentView(rootView);
    }

    {% include "_makeView.twig" with {'view': rootView, 'directive': null} %}

    {% for directive, directiveTree in isolateDirectiveTrees %}
    {% include "_makeView.twig" with {'view': directiveTree, 'directive': directive} %}
    {% endfor %}
}
