{% import "macros.twig" as macros %}
{% set currentIsolateDirective = null %}
package {{ package }};

import com.flarestar.drones.base.Drone;
import com.flarestar.drones.base.BaseScreen;
import com.flarestar.drones.views.viewgroups.BoxModelNode;
import com.flarestar.drones.views.scope.Scope;
import com.flarestar.drones.views.ViewFactory;
import com.flarestar.drones.views.ScopedViewFactory;
import com.flarestar.drones.views.viewgroups.BaseDroneViewGroup;
import com.flarestar.drones.views.viewgroups.DynamicViewGroup;
import com.flarestar.drones.views.viewgroups.dynamic.SingleViewFactory;
import com.flarestar.drones.views.viewgroups.dynamic.RangeViewFactory;
import com.flarestar.drones.views.scope.Listener;
import com.flarestar.drones.views.scope.Watcher;
import com.flarestar.drones.views.LayoutBuilder;
import com.flarestar.drones.views.aspect.ScrollingAspect;
import android.view.View;
import android.view.ViewGroup;
import android.os.Handler;
import javax.inject.Inject;
import javax.inject.Singleton;
import java.util.concurrent.Callable;
import {{ applicationPackage }}.R;

@Singleton
public class {{ className }} implements Drone, LayoutBuilder {

    private ViewFactory[] _toTransclude;

    {% for property in injectedProperties %}
    @Inject
    {{ property.type }} {{ property.name }};
    {% endfor %}

    {% for function in userFunctions %}
    {% if function.isInjected() %}
    @Inject
    {{ function.getFunctionClassName() }} _function_{{ function.getName() }};
    {% else %}
    {{ function.getFunctionClassName() }} _function_{{ function.getName() }} = new {{ function.getFunctionClassName() }}();
    {% endif %}
    {% endfor %}

    {% for directive, directiveTree in isolateDirectiveTrees %}
    {% include "_directiveScopeInterface.twig" with {'directive': directive} %}
    {% endfor %}

    {% for scope in scopeDefinitions %}
    {% include "_scopeDefinition.twig" with {'scope': scope} %}
    {% endfor %}

    private Handler _handler;

    @Inject
    public {{ className }}() {
        _handler = new Handler();
    }

    public void setUpDrone(final BaseScreen screen) {
        if (!(screen instanceof {{ screenClassName }})) {
            return;
        }

        final DynamicViewGroup rootView = (DynamicViewGroup)makeView_{{ rootView.id }}(screen);
        rootView.getScope().apply();
        screen.setContentView(rootView);

        _toTransclude = null;
    }

    {% include "_makeView.twig" with {'view': rootView, 'directive': null} %}

    {% for directive, directiveTree in isolateDirectiveTrees %}
    {% set currentIsolateDirective = directive %}
    {% include "_makeView.twig" with {'view': directiveTree, 'directive': directive} %}
    {% endfor %}

    {% for function in userFunctions %}
    private {{ function.getResultType() }} {{ function.getName() }}({% for argument in function.getParameters() %}{% if not loop.first %}, {% endif %}{{ argument.getType() }} {{ argument.getName() }}{% endfor %}) {
        {% if function.getResultType() != "void" %}return {% endif %}_function_{{ function.getName() }}.invoke({% for argument in function.getParameters() %}{% if not loop.first %}, {% endif %} {{ argument.getName() }}{% endfor %});
    }
    {% endfor %}
}
