    {% if not scope.owner.isDirectiveRoot %}
    public class {{ scope.getScopeClassName() }} extends Scope<{% if scope.getParentScope() != null %}{{ scope.getParentScope().getScopeClassName() }}{% else %}Scope{% endif %}>{% if scope.owner.hasIsolateDirective() %} implements DirectiveScope_{{ scope.owner.isolateDirective.getDirectiveName() }}{% endif %} {
    {% else %}
    public class {{ scope.getScopeClassName() }}<P extends Scope & DirectiveScope_{{ scope.owner.isolateDirective.getDirectiveName() }}> extends Scope<P> {
    {% endif %}
        {% for property in scope.ownProperties() %}
        public {{ property.type }} {{ property.name }};
        {% endfor %}

        {% if scope.getParentScope() == null and not scope.owner.isDirectiveRoot %}
        public {{ scope.getScopeClassName() }}(Handler handler, View owner) {
            super(handler, owner);
        {% else %}
        public {{ scope.getScopeClassName() }}(Handler handler, View owner, {% if scope.owner.isDirectiveRoot %}P{% else %}{{ scope.getParentScope().getScopeClassName() }}{% endif %} parent) {
            super(handler, owner, parent);
        {% endif %}

            final {{ scope.getScopeClassName() }} _self = this;

            {% for property in view.parent.scopeDefinition.inheritedProperties() %}
            final {{ property.type }} {{ property.name }} = {{ property.accessCode() }};
            {% endfor %}

            {% for property in scope.ownProperties() %}
            {% if property.canInitializeInScopeConstructor(scope.owner.isDirectiveRoot) %}
            {% set initialValue = scopePropertyValueDeducer.getInitialValueExpression(property, null) %}

            {% if initialValue != null %}
            this.{{ property.name }} = {{ initialValue }};
            {% endif %}
            {% endif %}
            {% if property.hasBidirectionalBinding() %}
            watch(new Watcher() { // bidirectional binding watch
                @Override
                public Object getWatchValue(Scope<?> _scope) {
                    final {{ property.type }} _parentValue = _parent.get_{{ property.name }}();

                    // if parent value != new value, set parent value
                    if (_self.{{ property.name }} == _parentValue) {
                        return _parentValue;
                    }

                    if (_parentValue != lastValue) { // parent value has changed, sync w/ this value
                        _self.{{ property.name }} = _parentValue;
                    } else { // current scope value changed, sync w/ parent
                        _parent.set_{{ property.name }}(_self.{{ property.name }});
                    }

                    return _parentValue;
                }
            });
            {% endif %}

            {% endfor %}
        }

        {% if scope.owner.hasIsolateDirective() and not scope.owner.isDirectiveRoot %}

        {% for property in scope.owner.isolateDirective.getScopeProperties() %}
        {% if property.hasBidirectionalBinding() %}
        @Override
        public {{ property.type }} get_{{ property.name }}() {
            return this.{{ property.name }};
        }

        @Override
        public void set_{{ property.name }}({{ property.type }} value) {
            this.{{ property.name }} = value;
        }
        {% endif %}
        {% endfor %}

        {% endif %}
    }
