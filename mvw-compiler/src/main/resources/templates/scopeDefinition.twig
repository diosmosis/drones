{% if not scope.isForDirectiveRoot() %}
public class {{ scope.getScopeClassName() }} extends Scope<{% if scope.hasParentScope() %}{{ scope.getParentScopeClassName() }}{% else %}Scope{% endif %}>{% if scope.ownerHasIsolateDirective() %} implements DirectiveScope_{{ scope.getOwnerIsolateDirectiveName() }}{% endif %} {
{% else %}
public class {{ scope.getScopeClassName() }}<P extends Scope & DirectiveScope_{{ scope.getOwnerIsolateDirectiveName() }}> extends Scope<P> {
{% endif %}
    {% for property in scope.getOwnScopeProperties() %}
    public {{ property.type }} {{ property.name }};
    {% endfor %}

    {% if not scope.hasParentScope() and not scope.isForDirectiveRoot() %}
    public {{ scope.getScopeClassName() }}(Handler handler, View owner) {
        super(handler, owner);
    {% else %}
    public {{ scope.getScopeClassName() }}(Handler handler, View owner, {% if scope.isForDirectiveRoot() %}P{% else %}{{ scope.getParentScopeClassName() }}{% endif %} parent) {
        super(handler, owner, parent);
    {% endif %}

        final {{ scope.getScopeClassName() }} _self = this;

        {% for property in scope.getInheritedProperties() %}
        final {{ property.type }} {{ property.name }} = _parent.{{ property.name }};
        {% endfor %}

        {% for property in scope.getOwnScopeProperties() %}
        {% if property.canInitializeInScopeConstructor() %}
        this.{{ property.name }} = {% render property.getInitialValue() %}{% endrender %};
        {% endif %}
        {% if property.hasBidirectionalBinding() %}
        watch(new Watcher() { // bidirectional binding watch
            @Override
            public Object getWatchValue(Scope<?> _scope) {
                final {{ property.type }} _parentValue = _parent.get_{{ property.name }}();

                // if parent value != new value, set parent value
                if (_self.{{ property.name }} == _parentValue) {
                    return _parentValue;
                }

                if (_parentValue != lastValue) { // parent value has changed, sync w/ this value
                    _self.{{ property.name }} = _parentValue;
                } else { // current scope value changed, sync w/ parent
                    _parent.set_{{ property.name }}(_self.{{ property.name }});
                }

                return _parentValue;
            }
        });
        {% endif %}
        {% endfor %}
    }

    {% if scope.ownerHasIsolateDirective() and not scope.isForDirectiveRoot() %}

    {% for property in scope.getIsolateDirectiveProperties() %}
    {% if property.hasBidirectionalBinding() %}
    @Override
    public {{ property.type }} get_{{ property.name }}() {
        return this.{{ property.name }};
    }

    @Override
    public void set_{{ property.name }}({{ property.type }} value) {
        this.{{ property.name }} = value;
    }
    {% endif %}
    {% endfor %}

    {% endif %}
}
