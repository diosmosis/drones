{% macro directive_hook(view, hookName) %}
{% for directive in view.directives %}{{ directive.getHookCode(hookName, view) }}{% endfor %}
{% endmacro %}

{% macro watcher(watcher) %}
scope.watch(new {{ watcher.getWatcherClass().getName() }}() {
    @Override
    public Object getWatchValue(Scope<?> _scope) {
        {{ watcher.getCodeForGetWatchValue() }}
    }

    @Override
    public void onValueChanged(Object newValue, Object oldValue, Scope<?> _scope) {
        {{ watcher.getCodeForOnValueChanged() }}
    }
});
{% endmacro %}

{% macro event(event) %}
scope.on({{ event.eventClass.getName() }}.class, new Listener<{{ event.eventClass.getName() }}>() {
    @Override
    public boolean invoke({{ event.eventClass.getName() }} event) {
        try {
            {{ event.expression }};
            scope.apply();
            return true;
        } catch (Exception e) {
            throw new RuntimeException("Unexpected error when invoking event handler.", e);
        }
    }
});
{% endmacro %}

{# TODO: use underscores for all internal variables #}
{% macro make_view_function(view, directive, interpolator, styleProcessor, typeInferer) %}
    {% import _self as self %}

    {% if directive != null %}
    {% set functionName = "makeDirectiveView_" ~ directive.getDirectiveName() %}
    {% set functionResult = "View" %}
    {% set functionPrefix = " <P extends Scope<?>>" %}
    {% set parentScopeClass = "P" %}
    {% else %}
    {% set functionName = "makeView_" ~ view.id %}
    {% if view.parent != null %}{% set functionResult = "ViewFactory" %}{% else %}{% set functionResult = "View" %}{% endif %}

    {% if view.parent != null %}
    {% set parentScopeClass = view.parent.scopeDefinition.getScopeClassName() %}
    {% endif %}
    {% endif %}

    {% if directive == null %}
    private {{ functionResult }} makeView_{{ view.id }}(final BaseScreen _screen{% if view.parent != null %}, final DynamicViewGroup _parentView, final {{ parentScopeClass }} _parentNodeScope{% endif %}) {
    {% else %}
    private <P extends Scope<?>> View makeDirectiveView_{{ directive.getDirectiveName() }}(final BaseScreen _screen, final DynamicViewGroup _parentView, final P _parentNodeScope
        {% for property in directive.boundProperties() %}, final {{ property.type }} _{{ property.name }}{% endfor %}) {
    {% endif %}

        {% if view.parent != null %}final {{ view.parent.scopeDefinition.getScopeClassName() }} scope = _parentNodeScope;
        {% if view.parent.scopeDefinition.getParentScope() != null %}final {{ view.parent.scopeDefinition.getParentScope().getScopeClassName() }} _parent = scope._parent;{% endif %}
        {% for property in view.parent.scopeDefinition.allProperties() %}final {{ property.type }} {{ property.name }} = {{ property.accessCode() }};
        {% endfor %}{% endif %}

    {% if functionResult == 'ViewFactory' %}
    {% if view.hasDynamicDirective() %}
        final ViewFactory _viewFactory = {{ self.directive_hook(view, "beginViewFactory") }}
    {% else %}
        final ViewFactory _viewFactory = new SingleViewFactory() {
            public View makeView() {
    {% endif %}
    {% endif %}

        {{ self.directive_hook(view, "beforeScopeCreated") }}

        {% if view.hasIsolateDirective() and view.parent != null %}

        {# TODO: setting owner to parent view; danger of some sort of memory leak appearing #}
        {% if view.hasScope() %}final {{ view.scopeDefinition.getScopeClassName() }} scope = {% if not view.scopeDefinition.isPassthroughScope() %}new {{ view.scopeDefinition.getScopeClassName() }}(_handler, _parentView{% if view.parent != null %}, _parentNodeScope{% endif %}){% else %}({{ view.scopeDefinition.getScopeClassName() }})_parentNodeScope{% endif %};
        {{ self.directive_hook(view, "onCreatedNewScope") }}
        {% if view.scopeDefinition.getParentScope() != null %}final {{ view.scopeDefinition.getParentScope().getScopeClassName() }} _parent = scope._parent;{% endif %}
        {% for property in view.scopeDefinition.ownProperties() %}final {{ property.type }} {{ property.name }} = scope.{{ property.name }};
        {% endfor %}{% endif %}

        return makeDirectiveView_{{ view.isolateDirective.getDirectiveName() }}(_screen, _parentView, scope{% for property in view.isolateDirective.boundProperties() %}, {{ property.getInitialValueExpression(view) }}{% endfor %});
        {% else %}
        return new ScopedViewFactory() {
            @Override
            public View make() {

                final {{ view.getViewClassName() }} result = new {{ view.getViewClassName() }}(_screen);

                {% if view.hasScope() %}final {{ view.scopeDefinition.getScopeClassName() }} scope = {% if not view.scopeDefinition.isPassthroughScope() %}new {{ view.scopeDefinition.getScopeClassName() }}(_handler, result{% if view.parent != null %}, _parentNodeScope{% endif %}){% else %}({{ view.scopeDefinition.getScopeClassName() }})_parentNodeScope{% endif %};
                {{ self.directive_hook(view, "onCreatedNewScope") }}
                {% if directive != null %}{% for property in view.scopeDefinition.ownProperties() %}{% if property.hasBinding() %}
                scope.{{ property.name }} = _{{ property.name }};
                {% endif %}{% endfor %}{% endif %}
                {% if view.scopeDefinition.getParentScope() != null %}final {{ view.scopeDefinition.getParentScope().getScopeClassName() }} _parent = scope._parent;{% endif %}
                {% for property in view.scopeDefinition.ownProperties() %}final {{ property.type }} {{ property.name }} = scope.{{ property.name }};
                {% endfor %}{% endif %}

                {{ self.directive_hook(view, "beforeViewCreated") }}

                result.setVisibility(View.VISIBLE);
                {% if view.getViewClassName() != null %}
                {% if typeInferer.isAssignable(view.getViewClassName(), "com.flarestar.drones.views.viewgroups.BaseDroneViewGroup") %}
                ((BaseDroneViewGroup)result).setScope(scope);
                {% endif %}
                {% endif %}

                {% if view.text != null and not view.text.isEmpty() %}result.setText({{ interpolator.interpolate(view.text) }});{% endif %}
                {{ styleProcessor.process(view) }}

                {{ self.directive_hook(view, "afterViewCreated") }}

                {% for event in view.scopeDefinition.events %}
                {{ self.event(event) }}
                {% endfor %}

                {% for child in view.children %}
                result.addChildDefinition(makeView_{{ child.id }}(_screen, result, scope));
                {% endfor %}
                {% if not view.children.isEmpty() %}
                result.createChildren();
                {% endif %}

                {{ self.directive_hook(view, "afterChildrenAdded") }}

                {% for viewDirective in view.directives %}
                {% for watcher in viewDirective.watchers %}
                {% if not watcher.isOnParentScope() %}{{ self.watcher(watcher) }}{% endif %}
                {% endfor %}
                {% endfor %}

                {{ self.directive_hook(view, "beforeReturnResult") }}

                return result;
            }
        }.make();
        {% endif %}

    {% if functionResult == 'ViewFactory' %}
    {% if view.hasDynamicDirective() %}
        {{ self.directive_hook(view, "endViewFactory") }}
    {% else %}
            }
        };
    {% endif %}

    {% for viewDirective in view.directives %}
    {% for watcher in viewDirective.watchers %}
    {% if watcher.isOnParentScope() %}{{ self.watcher(watcher) }}{% endif %}
    {% endfor %}
    {% endfor %}

    return _viewFactory;
    {% endif %}
    }

    {% for child in view.children %}
    {{ self.make_view_function(child, null, interpolator, styleProcessor, typeInferer) }}
    {% endfor %}
{% endmacro %}