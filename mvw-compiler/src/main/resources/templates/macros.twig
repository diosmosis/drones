{% macro directive_hook(view, hookName) %}
{% for directive in view.directives %}{{ directive.getHookCode(hookName, view) }}{% endfor %}
{% endmacro %}

{% macro watcher(watcher) %}
scope.watch(new {{ watcher.getWatcherClass().getName() }}() {
    @Override
    public Object getWatchValue(Scope<?> _scope) {
        {{ watcher.getCodeForGetWatchValue() }}
    }

    @Override
    public void onValueChanged(Object newValue, Object oldValue, Scope<?> _scope) {
        {{ watcher.getCodeForOnValueChanged() }}
    }
});
{% endmacro %}

{% macro event(event) %}
scope.on({{ event.eventClass.getName() }}.class, new Listener<{{ event.eventClass.getName() }}>() {
    @Override
    public boolean invoke({{ event.eventClass.getName() }} event) {
        try {
            {{ event.expression }};
            scope.apply();
            return true;
        } catch (Exception e) {
            throw new RuntimeException("Unexpected error when invoking event handler.", e);
        }
    }
});
{% endmacro %}

{# TODO: use underscores for all internal variables #}
