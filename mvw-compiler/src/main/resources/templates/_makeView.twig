{% import "macros.twig" as macros %}

{% if directive != null %}
{% set functionName = "makeDirectiveView_" ~ directive.getDirectiveName() %}
{% set functionResult = "View" %}
{% set functionPrefix = " <P extends Scope<?>>" %}
{% set parentScopeClass = "P" %}
{% else %}
{% set functionName = "makeView_" ~ view.id %}
{% if view.parent != null %}{% set functionResult = "ViewFactory" %}{% else %}{% set functionResult = "View" %}{% endif %}

{% if view.parent != null %}
{% set parentScopeClass = view.parent.scopeDefinition.getScopeClassName() %}
{% endif %}
{% endif %}

{% if directive == null %}
private {{ functionResult }} makeView_{{ view.id }}(final BaseScreen _screen{% if view.parent != null %}, final DynamicViewGroup _parentView, final {{ parentScopeClass }} _parentNodeScope{% endif %}) {
{% else %}
private <P extends Scope<?>> View makeDirectiveView_{{ directive.getDirectiveName() }}(final BaseScreen _screen, final DynamicViewGroup _parentView, final P _parentNodeScope
    {% for property in directive.boundProperties() %}, final {{ property.type }} _{{ property.name }}{% endfor %}) {
{% endif %}

    {% if view.parent != null %}final {{ view.parent.scopeDefinition.getScopeClassName() }} scope = _parentNodeScope;
    {% if view.parent.scopeDefinition.getParentScope() != null %}final {{ view.parent.scopeDefinition.getParentScope().getScopeClassName() }} _parent = scope._parent;{% endif %}
    {% for property in view.parent.scopeDefinition.allProperties() %}final {{ property.type }} {{ property.name }} = {{ property.accessCode() }};
    {% endfor %}{% endif %}

{% if functionResult == 'ViewFactory' %}
{% if view.hasDynamicDirective() %}
    final ViewFactory _viewFactory = {{ macros.directive_hook(view, "beginViewFactory") }}
{% else %}
    final ViewFactory _viewFactory = new SingleViewFactory() {
        public View makeView() {
{% endif %}
{% endif %}

    {{ macros.directive_hook(view, "beforeScopeCreated") }}

    {% if view.hasIsolateDirective() and view.parent != null %}

    {# TODO: setting owner to parent view; danger of some sort of memory leak appearing #}
    {% if view.hasScope() %}final {{ view.scopeDefinition.getScopeClassName() }} scope = {% if not view.scopeDefinition.isPassthroughScope() %}new {{ view.scopeDefinition.getScopeClassName() }}(_handler, _parentView{% if view.parent != null %}, _parentNodeScope{% endif %}){% else %}({{ view.scopeDefinition.getScopeClassName() }})_parentNodeScope{% endif %};
    {{ macros.directive_hook(view, "onCreatedNewScope") }}
    {% if view.scopeDefinition.getParentScope() != null %}final {{ view.scopeDefinition.getParentScope().getScopeClassName() }} _parent = scope._parent;{% endif %}
    {% for property in view.scopeDefinition.ownProperties() %}final {{ property.type }} {{ property.name }} = scope.{{ property.name }};
    {% endfor %}{% endif %}

    return makeDirectiveView_{{ view.isolateDirective.getDirectiveName() }}(_screen, _parentView, scope{% for property in view.isolateDirective.boundProperties() %}, {{ scopePropertyValueDeducer.getInitialValueExpression(property, view) }}{% endfor %});
    {% else %}
    return new ScopedViewFactory() {
        @Override
        public View make() {

            final {{ view.getViewClassName() }} result = new {{ view.getViewClassName() }}(_screen);

            {% if view.hasScope() %}final {{ view.scopeDefinition.getScopeClassName() }} scope = {% if not view.scopeDefinition.isPassthroughScope() %}new {{ view.scopeDefinition.getScopeClassName() }}(_handler, result{% if view.parent != null %}, _parentNodeScope{% endif %}){% else %}({{ view.scopeDefinition.getScopeClassName() }})_parentNodeScope{% endif %};
            {{ macros.directive_hook(view, "onCreatedNewScope") }}
            {% if directive != null %}{% for property in view.scopeDefinition.ownProperties() %}{% if property.hasBinding() %}
            scope.{{ property.name }} = _{{ property.name }};
            {% endif %}{% endfor %}{% endif %}
            {% if view.scopeDefinition.getParentScope() != null %}final {{ view.scopeDefinition.getParentScope().getScopeClassName() }} _parent = scope._parent;{% endif %}
            {% for property in view.scopeDefinition.ownProperties() %}final {{ property.type }} {{ property.name }} = scope.{{ property.name }};
            {% endfor %}{% endif %}

            {{ macros.directive_hook(view, "beforeViewCreated") }}

            result.setVisibility(View.VISIBLE);
            {% if view.getViewClassName() != null %}
            {% if typeInferer.isAssignable(view.getViewClassName(), "com.flarestar.drones.views.viewgroups.BaseDroneViewGroup") %}
            ((BaseDroneViewGroup)result).setScope(scope);
            {% endif %}
            {% endif %}

            {% if view.text != null and not view.text.isEmpty() %}result.setText({{ interpolator.interpolate(view.text) }});{% endif %}
            {{ styleProcessor.process(view) }}

            {{ macros.directive_hook(view, "afterViewCreated") }}

            {% for event in view.scopeDefinition.events %}
            {{ macros.event(event) }}
            {% endfor %}

            {% for child in view.children %}
            result.addChildDefinition(makeView_{{ child.id }}(_screen, result, scope));
            {% endfor %}
            {% if not view.children.isEmpty() %}
            result.createChildren();
            {% endif %}

            {{ macros.directive_hook(view, "afterChildrenAdded") }}

            {% for viewDirective in view.directives %}
            {% for watcher in viewDirective.watchers %}
            {% if not watcher.isOnParentScope() %}{{ macros.watcher(watcher) }}{% endif %}
            {% endfor %}
            {% endfor %}

            {{ macros.directive_hook(view, "beforeReturnResult") }}

            return result;
        }
    }.make();
    {% endif %}

{% if functionResult == 'ViewFactory' %}
{% if view.hasDynamicDirective() %}
    {{ macros.directive_hook(view, "endViewFactory") }}
{% else %}
        }
    };
{% endif %}

{% for viewDirective in view.directives %}
{% for watcher in viewDirective.watchers %}
{% if watcher.isOnParentScope() %}{{ macros.watcher(watcher) }}{% endif %}
{% endfor %}
{% endfor %}

return _viewFactory;
{% endif %}
}

{% for child in view.children %}
{% include "_makeView.twig" with {'view': child, 'directive': null} %}
{% endfor %}
